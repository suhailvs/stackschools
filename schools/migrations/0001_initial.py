# Generated by Django 4.0.1 on 2022-01-30 09:45

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='School',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.IntegerField(default=1000000)),
                ('school_name', models.CharField(max_length=200)),
                ('udise_code', models.CharField(max_length=11)),
                ('state', models.CharField(max_length=60)),
                ('district', models.CharField(max_length=60)),
                ('block', models.CharField(max_length=60)),
                ('cluster', models.CharField(max_length=200)),
                ('village', models.CharField(max_length=60)),
                ('pincode', models.CharField(max_length=6)),
                ('school_category', models.CharField(max_length=60)),
                ('school_type', models.CharField(max_length=60)),
                ('class_from', models.SmallIntegerField()),
                ('class_to', models.SmallIntegerField()),
                ('state_management', models.CharField(max_length=200)),
                ('national_management', models.CharField(max_length=200)),
                ('status', models.CharField(max_length=60)),
                ('location', models.CharField(max_length=60)),
                ('aff_board_sec', models.CharField(max_length=60)),
                ('aff_board_hsec', models.CharField(max_length=60)),
                ('year_of_establishment', models.SmallIntegerField()),
                ('pre_primary', models.CharField(max_length=10)),
                ('building_status', models.CharField(max_length=60)),
                ('boundary_wall', models.CharField(max_length=60)),
                ('no_of_boys_toilets', models.SmallIntegerField()),
                ('no_of_girls_toilets', models.SmallIntegerField()),
                ('no_of_cwsn_toilets', models.SmallIntegerField()),
                ('drinking_water_availability', models.BooleanField(default=True)),
                ('hand_wash_facility', models.BooleanField(default=True)),
                ('functional_generator', models.SmallIntegerField()),
                ('library', models.BooleanField(default=True)),
                ('reading_corner', models.BooleanField(default=True)),
                ('book_bank', models.BooleanField(default=True)),
                ('functional_laptop', models.SmallIntegerField()),
                ('functional_desktop', models.SmallIntegerField()),
                ('functional_tablet', models.SmallIntegerField()),
                ('functional_scanner', models.SmallIntegerField()),
                ('functional_printer', models.SmallIntegerField()),
                ('functional_led', models.SmallIntegerField()),
                ('functional_digiboard', models.SmallIntegerField()),
                ('internet', models.BooleanField(default=True)),
                ('dth', models.BooleanField(default=True)),
                ('functional_web_cam', models.SmallIntegerField()),
                ('class_rooms', models.SmallIntegerField()),
                ('other_rooms', models.SmallIntegerField()),
                ('enrolment_of_the_students', models.CharField(max_length=60)),
                ('total_teachers', models.SmallIntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('user_type', models.PositiveSmallIntegerField(choices=[(0, 'others'), (1, 'student'), (2, 'teacher')], default=0)),
                ('mobile', models.PositiveBigIntegerField(null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('school', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='users', to='schools.school')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
